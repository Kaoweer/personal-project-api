generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SavedProgram {
  id        Int @id @default(autoincrement())
  userId    Int
  programId Int

  @@index([userId], map: "SavedProgram_userId_fkey")
  @@map("savedprogram")
}

model AllowedUser {
  id              Int             @id @default(autoincrement())
  programId       Int
  userId          Int
  isAllowed       Boolean         @default(false)
  trainingProgram TrainingProgram @relation(fields: [programId], references: [id], map: "AllowedUser_programId_fkey")

  @@unique([programId, userId], map: "AllowedUser_programId_userId_key")
  @@index([userId], map: "AllowedUser_userId_fkey")
  @@map("alloweduser")
}

model TrainingProgram {
  id          Int              @id @default(autoincrement())
  authorId    Int
  status      ProgramStatus    @default(PERSONAL)
  rating      Float?
  name        String?          @default("Untitled program")
  tags        String?
  detail      String?
  image       String?
  AllowedUser AllowedUser[]
  payments    Payment[]
  workouts    ProgramWorkout[]

  @@index([authorId], map: "TrainingProgram_authorId_fkey")
  @@map("trainingprogram")
}

model ProgramWorkout {
  id              Int             @id @default(autoincrement())
  programId       Int
  workoutId       Int
  orderPriority   Int
  sets            Int
  reps            Int
  rest            Int
  day             Int
  trainingProgram TrainingProgram @relation(fields: [programId], references: [id], onDelete: Cascade, map: "ProgramWorkout_programId_fkey")

  @@index([programId], map: "ProgramWorkout_programId_fkey")
  @@index([workoutId], map: "ProgramWorkout_workoutId_fkey")
  @@map("programworkout")
}

model ProgressImage {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  userId    Int

  @@index([userId], map: "ProgressImage_userId_fkey")
  @@map("progressimage")
}

model Payment {
  id                Int             @id @default(autoincrement())
  amount            Float
  date              DateTime        @default(now())
  status            PaymentStatus
  clientId          Int
  trainerId         Int
  trainingProgramId Int
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade, map: "Payment_trainingProgramId_fkey")

  @@index([clientId], map: "Payment_clientId_fkey")
  @@index([trainerId], map: "Payment_trainerId_fkey")
  @@index([trainingProgramId], map: "Payment_trainingProgramId_fkey")
  @@map("payment")
}

enum ProgramStatus {
  PUBLIC
  PRIVATE
  PERSONAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
