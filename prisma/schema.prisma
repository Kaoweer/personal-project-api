// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model SavedProgram {
//   id     Int  @id @default(autoincrement())
//   userId Int
//   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   programId Int 
// }

model User {
  id             Int               @id @default(autoincrement())
  email          String?           @unique
  mobile         String?           @unique
  username       String            @unique
  gender         Gender?
  weight         Float?
  height         Float?
  role           Role              @default(CLIENT)
  password       String
  progressImages ProgressImage[]
  programs       TrainingProgram[]
  ClientPayment  Payment[]         @relation(name: "ClientPayment") // Payments as both client and trainer
  TrainerPayment Payment[]         @relation(name: "TrainerPayment") // Payments as both client and trainer
  verification   Verification?
  UserWorkout    UserWorkout[]
  AllowedUser    AllowedUser[]
  SavedProgram   SavedProgram[]
}

enum Gender {
  MALE
  FEMALE
}

model AllowedUser {
  id              Int             @id @default(autoincrement())
  programId       Int
  trainingProgram TrainingProgram @relation(fields: [programId], references: [id])
  userId          Int
  user            User            @relation(fields: [userId], references: [id])
  isAllowed       Boolean         @default(false)

  @@unique([programId, userId])
}

model TrainingProgram {
  // Add name
  // Add userAllowed
  // Add image
  id          Int              @id @default(autoincrement())
  author      User             @relation(fields: [authorId], references: [id])
  authorId    Int // The trainer who created the course
  status      ProgramStatus    @default(PERSONAL)
  rating      Float?
  name        String?          @default("Untitled program")
  tags        String?
  detail      String?
  image       String?
  workouts    ProgramWorkout[] // A TrainingProgram can consist of many ordered workouts
  payments    Payment[] // Payments made for this program
  AllowedUser AllowedUser[]
}

model Workout {
  id               Int              @id @default(autoincrement())
  name             String
  force            String?
  level            String?
  mechanic         String?
  equipment        String?
  primaryMuscles   String?
  secondaryMuscles String?
  instructions     String?
  category         String?
  userWorkouts     UserWorkout[] // Users' personal records for this workout
  programWorkout   ProgramWorkout[]
}

model WorkoutDate {
  id               Int            @id @default(autoincrement())
  programworkoutId Int
  ProgramWorkout   ProgramWorkout @relation(fields: [programworkoutId], references: [id], onDelete: Cascade)
  date             Int
}

model ProgramWorkout {
  id              Int             @id @default(autoincrement())
  trainingProgram TrainingProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId       Int
  workout         Workout         @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId       Int
  orderPriority   Int // Order of the workout in the training program
  sets            Int
  reps            Int
  rest            Int
  day             Int
  WorkoutDate     WorkoutDate[]
}

model UserWorkout {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  workout        Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId      Int
  personalRecord Float? // User-specific personal best for the workout
  createdAt      DateTime @default(now()) // Track when the personal record was achieved
  updatedAt      DateTime @updatedAt
}

model Verification {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int     @unique
  imageUrl   String // Image URL of the certification
  isVerified Boolean @default(false)
}

model ProgressImage {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Payment {
  id                Int             @id @default(autoincrement())
  amount            Float
  date              DateTime        @default(now())
  status            PaymentStatus
  client            User            @relation(name: "ClientPayment", fields: [clientId], references: [id], onDelete: Cascade)
  clientId          Int // The user who is making the payment
  trainer           User            @relation(name: "TrainerPayment", fields: [trainerId], references: [id], onDelete: Cascade)
  trainerId         Int // The trainer receiving the payment
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade) // Course being paid for
  trainingProgramId Int // The specific course being paid for
}

enum Role {
  CLIENT
  TRAINER
  ADMIN
}

enum ProgramStatus {
  PUBLIC
  PRIVATE
  PERSONAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
